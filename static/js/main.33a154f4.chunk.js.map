{"version":3,"sources":["components/AutoComplete/MockApi.js","components/AutoComplete/AutoComplete.js","components/utils.js","App.js","index.js"],"names":["getRandomBool","n","maxRandomCoeff","Math","floor","random","getSuggestions","text","post","results","push","Promise","resolve","reject","randomTimeout","setTimeout","AutoComplete","props","inputRef","createRef","getSuggestionsFromApi","a","filteredSuggestions","setState","showSuggestions","console","error","onClick","index","state","currentUserInput","userInput","lastSpace","lastIndexOf","newUserInput","slice","activeSuggestion","current","focus","onKeyDown","e","keyCode","length","onChange","target","value","lastWord","split","func","wait","timeout","params","clearTimeout","debounce","bind","wrapperRef","handleClickOutside","document","addEventListener","this","removeEventListener","event","contains","suggestionsListComponent","className","map","suggestion","word","matchStart","indexOf","endOfMatch","style","color","ref","placeholder","type","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.33a154f4.chunk.js","sourcesContent":["var FAILURE_COEFF = 10;\nvar MAX_SERVER_LATENCY = 200;\n\nfunction getRandomBool(n) {\n  var maxRandomCoeff = 1000;\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\n}\n\nexport default function getSuggestions(text) {\n  var pre = \"pre\";\n  var post = \"post\";\n  var results = [];\n  if (getRandomBool(2)) {\n    results.push(pre + text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text + post);\n  }\n  if (getRandomBool(2)) {\n    results.push(pre + text + post);\n  }\n  return new Promise((resolve, reject) => {\n    var randomTimeout = Math.random() * MAX_SERVER_LATENCY;\n    setTimeout(() => {\n      if (getRandomBool(FAILURE_COEFF)) {\n        reject();\n      } else {\n        resolve(results);\n      }\n    }, randomTimeout);\n  });\n}","import React, { Component, createRef } from \"react\";\nimport debounce from \"../utils\";\nimport getSuggestions from \"./MockApi\";\n\nclass AutoComplete extends Component {\n  inputRef = createRef();\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n    \n    this.getSuggestionsFromApi = debounce(this.getSuggestionsFromApi, 600).bind(this);\n    this.wrapperRef = createRef();\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n  \n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.current.contains(event.target)) {\n      this.setState({\n        activeSuggestion: 0,\n        showSuggestions: false,\n      });\n    }\n  }\n\n  getSuggestionsFromApi = async (text) => {\n    try {\n      const filteredSuggestions = await getSuggestions(text);\n      this.setState({\n        filteredSuggestions,\n        showSuggestions: true,\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  onClick = (index) => {\n    const { filteredSuggestions} = this.state;\n    const currentUserInput = this.state.userInput;\n    let lastSpace = currentUserInput.lastIndexOf(\" \"); // find the last space on the string\n    let preWords = lastSpace > 0 ? currentUserInput.slice(0, lastSpace) + \" \" : \"\";\n    // gets the substring from the beginning to the last space (before last word that should be autocompleted)\n\n    let newUserInput = preWords + filteredSuggestions[index] + \" \";\n    // then concat the rest of the autocompleted word, (and obviously the last space)\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: newUserInput\n    });\n    this.inputRef.current.focus();\n  };\n\n  onKeyDown = (e) => {\n    const { activeSuggestion, filteredSuggestions } = this.state;\n\n    // User pressed the enter key\n    if (e.keyCode === 13) {\n      if (!this.state.showSuggestions) return; // if suggestions are not shown, why to do all next?\n\n      this.onClick(activeSuggestion);\n    }\n    // User pressed the up arrow\n    else if (e.keyCode === 38) {\n      if (activeSuggestion === 0)\n        this.setState({ activeSuggestion: filteredSuggestions.length - 1 });\n      else this.setState({ activeSuggestion: activeSuggestion - 1 });\n    }\n    // User pressed the down arrow\n    else if (e.keyCode === 40) {\n      if (activeSuggestion === filteredSuggestions.length - 1)\n        this.setState({ activeSuggestion: 0 });\n      else this.setState({ activeSuggestion: activeSuggestion + 1 });\n    }\n  };\n\n  onChange = (e) => {\n    const userInput = e.target.value;\n    const lastWord = userInput.split(\" \").slice(-1)[0];\n\n    if (lastWord && lastWord !== \"\") {  // if last word is void, dont make the fetch\n      this.getSuggestionsFromApi(lastWord);\n    }\n\n    this.setState({\n      activeSuggestion: 0,\n      userInput,\n      showSuggestions: false,\n    });\n  };\n\n  render() {\n    const {\n      activeSuggestion,\n      filteredSuggestions,\n      showSuggestions,\n      userInput\n    } = this.state;\n\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = (\n          <ul className=\"suggestions\">\n            {filteredSuggestions.map((suggestion, index) => {\n              const word = userInput.split(\" \").slice(-1)[0];\n              const matchStart = suggestion.indexOf(word);\n              const endOfMatch = matchStart + word.length;\n              return (\n                <li\n                  className={ index === activeSuggestion ? \"suggestion-active\" : \"\" }\n                  key={suggestion}\n                  onClick={() => this.onClick(index)}\n                >\n                  {suggestion.slice(0, matchStart)}\n                  <span style={{ color: \"green\" }}>\n                    {suggestion.slice(matchStart, endOfMatch)}\n                  </span>\n                  {suggestion.slice(endOfMatch, suggestion.length)}\n                </li>\n              );\n            })}\n          </ul>\n        );\n      } else {\n        suggestionsListComponent = (\n          <div className=\"no-suggestions\">\n            <em>No suggestions, you&apos;re on your own!</em>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <div ref={this.wrapperRef}>\n        <input\n          ref={this.inputRef}\n          placeholder=\"Search important stuff\"\n          type=\"search\"\n          onChange={this.onChange}\n          onKeyDown={this.onKeyDown}\n          value={userInput}\n        />\n        {suggestionsListComponent}\n      </div>\n    );\n  }\n}\n\nexport default AutoComplete;\n","export default function debounce(func, wait) {\n  let timeout;\n  return (...params) => {\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      func(...params);\n    }, wait);\n  };\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport AutoComplete from \"./components/AutoComplete/AutoComplete\";\n\nfunction App() {\n\n  return (\n    <div>\n      <h1>ABC - Search</h1>\n      <AutoComplete />\n    </div>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}